#app.py
app.include_router(items.router)

#schemas.py
class Item(BaseModel):
    name: str
    price: float


class ItemSchema(BaseModel):
    name: str
    price: float


class ItemPublic(BaseModel):
    id: int
    name: str
    price: float
    model_config = ConfigDict(from_attributes=True)


class ItemList(BaseModel):
    items: list[ItemPublic]

#models.py
@table_registry.mapped_as_dataclass
class Item:
    __tablename__ = 'items'

    id: Mapped[int] = mapped_column(init=False, primary_key=True)
    name: Mapped[str] = mapped_column(unique=True)
    price: Mapped[float]
    date: Mapped[datetime] = mapped_column(
        init=False, server_default=func.now()
    )


#routers/-->items.py
#CRUD for items
from http import HTTPStatus

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.future import select
from sqlalchemy.orm import Session

from fast_zero.database import get_session
from fast_zero.models import Item
from fast_zero.schemas import ItemList, ItemPublic, ItemSchema, Message

router = APIRouter(prefix='/items', tags=['items'])


@router.get('/{item_id}', response_model=ItemPublic)
def read_item(item_id: int, session: Session = Depends(get_session)):
    db_item = session.scalar(select(Item).where(Item.id == item_id))
    if not db_item:
        raise HTTPException(
            status_code=HTTPStatus.NOT_FOUND, detail='Item não encontrado'
        )
    return db_item


@router.post('/', response_model=ItemPublic)
def create_item(item: ItemSchema, session: Session = Depends(get_session)):
    db_item = session.scalar(select(Item).where((Item.name == item.name)))
    if db_item:
        if db_item.name == item.name:
            raise HTTPException(
                status_code=HTTPStatus.NOT_FOUND, detail='Item Já Existe'
            )
    db_item = Item(
        name=item.name,
        price=item.price,
    )
    session.add(db_item)
    session.commit()
    session.refresh(db_item)

    return db_item


@router.get('/', response_model=ItemList)
def get_all_items(
    skip: int = 0, limit: int = 100, session: Session = Depends(get_session)
):
    statement = select(Item).offset(skip).limit(limit)
    result = session.execute(statement)
    items = result.scalars().all()
    return {'items': items}


@router.delete('/', response_model=Message)
def delete_item(item_id: int, session: Session = Depends(get_session)):
    db_item = session.scalar(select(Item).where(Item.id == item_id))
    if not db_item:
        raise HTTPException(
            status_code=HTTPStatus.NOT_FOUND, detail='Item nao encontrado'
        )

    session.delete(db_item)
    session.commit()

    return {'message': 'Item Deletado'}


@router.put('/', response_model=ItemPublic)
def update_item(
    item_id: int, item: ItemSchema, session: Session = Depends(get_session)
):
    db_item = session.scalar(select(Item).where(Item.id == item_id))
    if not db_item:
        raise HTTPException(
            status_code=HTTPStatus.NOT_FOUND, detail='Item nao encontrado'
        )
    db_item.name = item.name
    db_item.price = item.price

    session.add(db_item)
    session.commit()
    session.refresh(db_item)

    return db_item
